{"version":3,"sources":["components/Header/Header.jsx","components/Body/Body.jsx","api/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","TabContainer","props","console","log","flag","style","overflow","Helmet","charSet","rel","href","component","value","totalProcs","transition","fontSize","transitionProperty","frameStyle","perc","backgroundColor","duration","formatValue","n","procsS","procsR","procsT","procsZ","align","data","map","row","key","llave","Pid","Nombre","Estado","Memoria","User","variant","color","onClick","send","cpu","width","height","chartType","loader","options","title","hAxis","titleTextStyle","vAxis","minValue","hartArea","usedmem","memTotal","memFree","prettyBytes","memPercent","Body","state","handleChange","event","setState","handlecodeChange","code","titulos","cont","this","onChange","indicatorColor","textColor","scrollButtons","centered","label","datacpu","dataram","Component","socket","WebSocket","App","cpuinfo","meminfo","Cpuu","Infop","Array","Memfree","Mempercent","Memtotal","Procsr","Procss","Procst","Procsz","Totalprocs","autorize","username","pass","cb","msg","today","Date","dateTime","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","obj","JSON","parse","prevState","onopen","onmessage","onclose","onerror","error","pid","ProcsZ","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a665e15b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.scss\";\n\nconst Header = () => (\n  <div className=\"header\">\n    <h2>Proyecto -- 201222626</h2>\n  </div>\n);\n\nexport default Header;","import React, { Component } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\n//import Editor from './Editor';\n//import List from '@material-ui/core/List';\n//import ListItem from '@material-ui/core/ListItem';\n//import ListItemText from '@material-ui/core/ListItemText';\n//import ListSubheader from '@material-ui/core/ListSubheader';\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\n//import Paper from '@material-ui/core/Paper';\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Chart } from \"react-google-charts\";\nimport AnimatedNumber from 'react-animated-number';\nimport prettyBytes from 'pretty-bytes';\nimport {Helmet} from \"react-helmet\";\nlet id = 0;\n\n/*\nfunction createData(name, calories, fat, carbs, protein) {\n  id += 1;\n  return { id, name, calories, fat, carbs, protein };\n}\n*/\nfunction TabContainer(props) {\n    console.log(\"data TabContainer\")\n    //console.log(props.data);\n  switch (props.flag) {\n    case 0: {\n      return (\n\n        <Paper style={{ overflow: \"auto\" }}>\n          <Helmet>\n                <meta charSet=\"utf-8\" />\n                <title>Complementosssssssssssssssssssssssssss!!!!</title>\n                <link rel=\"canonical\" href=\"http://mysite.com/example\" />\n            </Helmet>\n            <AnimatedNumber component=\"text\" value={props.totalProcs}\n              style={{\n                  transition: '0.8s ease-out',\n                  fontSize: 24,\n                  transitionProperty:\n                      'background-color, color, opacity'\n              }}\n              frameStyle={perc => (\n                  perc === 100 ? {} : {backgroundColor: '#ffeb3b'}\n              )}\n              duration={300}\n              formatValue={n => 'Total Procesos: '+n}/>\n              <br></br>\n              <AnimatedNumber component=\"text\" value={props.procsS}\n              style={{\n                  transition: '0.8s ease-out',\n                  fontSize: 24,\n                  transitionProperty:\n                      'background-color, color, opacity'\n              }}\n              frameStyle={perc => (\n                  perc === 100 ? {} : {backgroundColor: '#ffeb3b'}\n              )}\n              duration={300}\n              formatValue={n => 'Procesos dormidos: '+n}/>\n              <br></br>\n              <AnimatedNumber component=\"text\" value={props.procsR}\n              style={{\n                  transition: '0.8s ease-out',\n                  fontSize: 24,\n                  transitionProperty:\n                      'background-color, color, opacity'\n              }}\n              frameStyle={perc => (\n                  perc === 100 ? {} : {backgroundColor: '#ffeb3b'}\n              )}\n              duration={300}\n              formatValue={n => 'Procesos corriendo: '+n}/>\n              <br></br> \n              <AnimatedNumber component=\"text\" value={props.procsT}\n              style={{\n                  transition: '0.8s ease-out',\n                  fontSize: 24,\n                  transitionProperty:\n                      'background-color, color, opacity'\n              }}\n              frameStyle={perc => (\n                  perc === 100 ? {} : {backgroundColor: '#ffeb3b'}\n              )}\n              duration={300}\n              formatValue={n => 'Procesos parados: '+n}/>\n              <br></br> \n              <AnimatedNumber component=\"text\" value={props.procsZ}\n              style={{\n                  transition: '0.8s ease-out',\n                  fontSize: 24,\n                  transitionProperty:\n                      'background-color, color, opacity'\n              }}\n              frameStyle={perc => (\n                  perc === 100 ? {} : {backgroundColor: '#ffeb3b'}\n              )}\n              duration={300}\n              formatValue={n => 'Procesos zombies: '+n}/>\n              <br></br>\n            \n            \n          <Table>\n            <TableHead>\n              <TableRow>\n              <TableCell align=\"right\">.</TableCell>\n                <TableCell align=\"right\">Pid</TableCell>\n                <TableCell align=\"right\">Nombre</TableCell>\n                <TableCell align=\"right\">Estado</TableCell>\n                <TableCell align=\"right\">Memoria</TableCell>\n                <TableCell align=\"right\">usuario</TableCell>\n                \n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {props.data.map(row => (\n                <TableRow key={row.llave}>\n                  <TableCell align=\"right\">{row.flag}</TableCell>\n                  <TableCell align=\"right\">{row.Pid}</TableCell>\n                  <TableCell align=\"right\">{row.Nombre}</TableCell>\n                  <TableCell align=\"right\">{row.Estado}</TableCell>\n                  <TableCell align=\"right\">{row.Memoria}</TableCell>\n                  <TableCell align=\"right\">{row.User}</TableCell>\n                  <TableCell align=\"right\">\n                    <Button\n                      variant=\"contained\"\n                      color=\"secondary\"\n                      onClick={() => props.send(row.Pid)}\n                    >\n                      Kill\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Paper>\n      );\n    }\n    case 1: {\n        //console.log(props.data);\n      return (\n        <Paper style={{ overflow: \"auto\" }}>\n          <AnimatedNumber component=\"text\" value={props.cpu}\n              style={{\n                  transition: '0.8s ease-out',\n                  fontSize: 24,\n                  transitionProperty:\n                      'background-color, color, opacity'\n              }}\n              frameStyle={perc => (\n                  perc === 100 ? {} : {backgroundColor: '#ffeb3b'}\n              )}\n              duration={300}\n              formatValue={n => 'CPU utilizado: '+n}/>\n              <br></br>\n          \n          <Chart\n            width={\"auto\"}\n            height={\"auto\"}\n            chartType=\"AreaChart\"\n            loader={<div>Loading Chart</div>}\n            data={props.data}\n            options={{\n              title: \"CPU server\",\n              hAxis: { title: \"Time\", titleTextStyle: { color: \"#333\" } },\n              vAxis: { minValue: 0 },\n              // For the legend to fit, we make the chart area smaller\n              hartArea: { width: \"90%\", height: \"80%\" }\n              // lineWidth: 25\n            }}\n          />\n        </Paper>\n      );\n    }\n    case 2: {\n        //console.log(props.data);\n        let usedmem = props.memTotal - props.memFree;\n        console.log(\"Memoria utilizada: \"+usedmem);\n        console.log(\"Memoria total: \"+props.memTotal);\n        console.log(\"Memoria total: \"+props.memFree);\n        return (\n            <Paper style={{ overflow: \"auto\" }}>\n              <AnimatedNumber component=\"text\" value={props.memTotal}\n              style={{\n                  transition: '0.8s ease-out',\n                  fontSize: 24,\n                  transitionProperty:\n                      'background-color, color, opacity'\n              }}\n              frameStyle={perc => (\n                  perc === 100 ? {} : {backgroundColor: '#ffeb3b'}\n              )}\n              duration={300}\n              formatValue={n => 'Memoria total: '+prettyBytes(n)}/>\n              <br></br>\n              <AnimatedNumber component=\"text\" value={usedmem}\n              style={{\n                  transition: '0.8s ease-out',\n                  fontSize: 24,\n                  transitionProperty:\n                      'background-color, color, opacity'\n              }}\n              frameStyle={perc => (\n                  perc === 100 ? {} : {backgroundColor: '#ffeb3b'}\n              )}\n              duration={300}\n              formatValue={n => 'Memoria Utilizada: '+prettyBytes(n)}/>\n              <br></br>\n              <AnimatedNumber component=\"text\" value={props.memPercent}\n              style={{\n                  transition: '0.8s ease-out',\n                  fontSize: 24,\n                  transitionProperty:\n                      'background-color, color, opacity'\n              }}\n              frameStyle={perc => (\n                  perc === 100 ? {} : {backgroundColor: '#ffeb3b'}\n              )}\n              duration={300}\n              formatValue={n => 'Porcentaje: '+n +'%'}/>\n              \n              \n          <Chart\n            width={\"auto\"}\n            height={\"auto\"}\n            chartType=\"AreaChart\"\n            loader={<div>Loading Chart</div>}\n            data={props.data}\n            options={{\n              title: \"RAM server\",\n              hAxis: { title: \"Time\", titleTextStyle: { color: \"#333\" } },\n              vAxis: { minValue: 0 },\n              // For the legend to fit, we make the chart area smaller\n              hartArea: { width: \"90%\", height: \"80%\" }\n              // lineWidth: 25\n            }}\n          />\n        </Paper>\n          );\n    }\n  }\n  \n}\nexport default class Body extends Component {\n  state = {\n    value: 0,\n    \n  };\n\n  constructor(props) {\n    super(props);\n    this.titulos = [\"Principal\", \"CPU\", \"RAM\"];\n    console.log(\"Constructor del Body\");\n    console.log(props)\n    console.log(this.props.data);\n  }\n  handleChange = (event, value) => {\n    this.setState({ value });\n  };\n  handlecodeChange = code => {\n    console.log(\"desde Footer:: \" + code);\n  };\n  render() {\n    console.log(\"En el render de BODY\")\n    \n    const { value } = this.state;\n    let cont;\n    if(typeof this.props.data === 'undefined'){\n      console.log(\"ENTRO AL PRIMER IF\");\n      console.log(this.props);\n      console.log(this.props.data);  \n      cont = <h1>jijijiji</h1>;\n    }\n    else{\n      console.log(\"ENTRO AL ELSE\");\n      cont = (\n        <Paper>\n          \n          \n          <Tabs\n            value={value}\n            onChange={this.handleChange}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            variant=\"scrollable\"\n            scrollButtons=\"auto\"\n            centered\n          >\n            {<Tab label={this.titulos[0]} />}\n            {<Tab label={this.titulos[1]} />}\n            {<Tab label={this.titulos[2]} />}\n            {<Tab label={this.titulos[3]} />}\n          </Tabs>\n          {value === 0 && (\n          <TabContainer\n            flag={0}\n            data={this.props.data}\n            send={this.props.send}\n            totalProcs={this.props.totalProcs}\n            procsS={this.props.procsS}\n            procsR={this.props.procsR}\n            procsT={this.props.procsT}\n            procsZ={this.props.procsZ}\n            cpu = {this.props.cpu}\n          ></TabContainer>\n        )}\n        {value === 1 && (\n          <TabContainer\n            flag={1}\n            data={this.props.datacpu}\n            send={this.props.send}\n            totalProcs={this.props.totalProcs}\n            procsS={this.props.procsS}\n            procsR={this.props.procsR}\n            procsT={this.props.procsT}\n            procsZ={this.props.procsZ}\n            cpu = {this.props.cpu}\n            \n          ></TabContainer>\n        )}\n        {value === 2 && (\n          <TabContainer\n            flag={2}\n            data={this.props.dataram}\n            send={this.props.send}\n            memTotal={this.props.memTotal}\n            memFree={this.props.memFree}\n            memPercent={this.props.memPercent}\n          ></TabContainer>\n        )}\n          \n        </Paper>\n      ); \n    }\n    return cont\n  }\n}\n","var socket = new WebSocket(\"ws://192.168.0.10:8080/ws\");\n//http://localhost:5003/socket.io/socket.io.js\n//ws://35.184.187.153:8080/ws\n//ws://172.17.0.1:8080/hereIsWS\nlet connect = cb => {\n    console.log(\"connecting\");\n\n    socket.onopen = () => {\n        console.log(\"Successfully Connected\");\n    };\n\n    socket.onmessage = msg => {\n        console.log(\"-----MENSAJE NUEVOOOOO------\")\n        console.log(msg);\n\n\n        console.log(\"-----------\")\n        cb(msg);\n    };\n\n    socket.onclose = event => {\n        console.log(\"Socket Closed Connection: \", event);\n    };\n\n    socket.onerror = error => {\n        console.log(\"Socket Error: \", error);\n    };\n};\n\nlet sendMsg = msg => {\n    console.log(\"sending msg: \", msg);\n    socket.send(msg);\n};\n\nexport { connect, sendMsg };","import React, { Component, Fragment } from \"react\";\nimport Header from './components/Header/Header';\nimport Body from './components/Body/Body';\n\nimport './App.css';\nimport { connect, sendMsg } from \"./api\";\n\n\n\n\nclass App extends Component {\n\n\n\n    //state = {infoprocess:{},inforam:{},inforam:{},chatHistory:new Array()}\n\n    state = {\n            cpuinfo: -1,\n            meminfo: -1,\n            Cpuu: [\n                [\"Time\", \"Cpu\"]\n            ],\n            Infop: new Array(),\n            Memfree: -1,\n            Mempercent: [\n                [\"Time\", \"Ram\"]\n            ],\n            Memtotal: -1,\n            Procsr: -1,\n            Procss: -1,\n            Procst: -1,\n            Procsz: -1,\n            Totalprocs: -1,\n            autorize: false,\n            username: \"\",\n            pass: \"\"\n        }\n        /*  \nstate = {\n    listacomplementos: new Array()\n}\n*/\n    constructor(props) {\n        console.log(\"Constructor de App\")\n        super(props);\n\n\n        console.log(this.state.Cpuu);\n    }\n\n    componentDidMount() {\n        console.log(\"En el componentDidMount de App \")\n        connect((msg) => {\n            console.log(\"New Message\")\n            let today = new Date();\n            let date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n            let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n            let dateTime = date + ' ' + time;\n            console.log(this.state.Cpuu);\n            console.log(msg);\n            let obj = JSON.parse(msg.data);\n            //console.log(obj)\n            this.setState(prevState => ({\n                //chatHistory: [...this.state.chatHistory, msg]\n                Cpuu: [...this.state.Cpuu, [dateTime, obj.Cpuu]],\n                Infop: obj.Infop,\n                Memfree: obj.Memfree,\n                //[Date.now().toLocaleString(),obj.Mempercent]\n                Mempercent: [...this.state.Mempercent, [dateTime, obj.Mempercent]],\n                Memtotal: obj.Memtotal,\n                Procsr: obj.Procsr,\n                Procss: obj.Procss,\n                Procst: obj.Procst,\n                Procsz: obj.Procsz,\n                Totalprocs: obj.Totalprocs,\n                cpuinfo: obj.Cpuu,\n                meminfo: obj.Mempercent\n\n            }))\n\n            console.log(obj);\n        });\n    }\n    send(pid) {\n        //console.log(pid)\n        sendMsg(pid);\n        //console.log(event.target.value)\n        /*if(event.keyCode === 13) {\n          sendMsg(event.target.value);\n          event.target.value = \"\";\n        }\n        */\n    }\n\n    render() {\n\n\n\n\n        return ( <\n            Fragment >\n            <\n            Header / >\n\n            <\n            Body\n            data = { this.state.Infop }\n            send = { this.send }\n            totalProcs = {this.state.Totalprocs}\n\n\n            datacpu = { this.state.Cpuu }\n            totalProcs = { this.state.Totalprocs }\n            procsS = { this.state.Procss }\n            procsR = { this.state.Procsr }\n            procsT = { this.state.Procst }\n            procsZ = { this.state.ProcsZ }\n            cpu = { this.state.cpuinfo }\n\n            dataram = { this.state.Mempercent }\n            memTotal = { this.state.Memtotal }\n            memFree = { this.state.Memfree }\n            memPercent = { this.state.meminfo }\n\n            / > < /\n            Fragment >\n        );\n\n\n\n\n\n\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}